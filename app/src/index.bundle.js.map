{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"electron\"","webpack:///./app/src/main/electron/functions/createLogger.ts","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///./app/src/main/electron/electronDirectoryPaths.ts","webpack:///external \"lodash\"","webpack:///./app/src/main/electron/index.ts","webpack:///./app/src/main/electron/serverProcessManager.ts","webpack:///external \"cross-spawn\"","webpack:///external \"winston\"","webpack:///external \"winston-daily-rotate-file\"","webpack:///external \"os\"","webpack:///./app/src/main/electron/windowManager.ts","webpack:///./app/src/main/electron/commonUtils.ts","webpack:///./app/src/main/electron/functions/parseCommandLine.ts","webpack:///./app/src/main/electron/functions/configInitialize.ts","webpack:///./app/src/main/electron/functions/registerGlobalShortcut.ts","webpack:///./app/src/main/electron/functions/checkUpdate.ts","webpack:///external \"./main/mainRouter.build\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","combine","format","timestamp","printf","_logPath","join","app","getPath","logger","createLogger","level","message","transports","Console","exitOnError","add","filename","dirname","datePattern","zippedArchive","maxSize","maxFiles","json","formatter","options","logPath","labelName","child","label","subDirPath","fileName","isAsarPacked","getAppPath","indexOf","rootAppPath","isMacOS","type","includes","views","config","server","validator","mainWindow","undefined","mainRouter","entryServer","autoOpenHardwareId","roomIds","requestSingleInstanceLock","info","on","quit","event","url","openHardwareId","getArgsParseData","setTimeout","Promise","resolve","selectHardware","argv","workingDirectory","parseData","roomId","entryHwCustomSchema","find","arg","verbose","isMinimized","restore","focus","webContents","push","addRoomId","ipcMain","close","relaunch","exit","commandLine","appendSwitch","setAsDefaultProtocolClient","once","Menu","setApplicationMenu","process","slice","commandLineOptions","configRoomIds","customSchemaArgvIndex","createMainWindow","debug","createAboutWindow","__dirname","mainWindowCloseConfirmed","aboutWindow","hide","e","msg","dialog","showMessageBoxSync","detail","show","handle","openSourceFile","promises","readFile","error","whichButtonClicked","title","toString","buttons","stack","router","serverBinaryPath","accessSync","this","childProcess","stdio","detached","Error","setRouter","open","_receiveFromChildEventRegister","_sendToChild","kill","addRoomIdsOnSecondInstance","currentRoomId","disconnectHardware","send","data","methodName","_isProcessLive","notifyCloudModeChanged","notifyServerRunningModeChanged","handleServerData","handleServerSocketConnected","handleServerSocketClosed","console","killed","connected","channel","ServerProcessManager","viewDirectoryPath","parent","BrowserWindow","width","height","resizable","movable","center","frame","modal","webPreferences","nodeIntegration","contextIsolation","preload","loadURL","global","sharedObject","hardwareVersion","minWidth","backgroundThrottling","openDevTools","setMenu","preventDefault","lpad","str","len","strLen","length","result","String","getPaddedVersion","version","versionStr","padded","split","forEach","item","log","exec","replace","CommonUtils","properties","flag","pair","parseFlags","fullName","alias","parsePair","reduce","toPairs","defaultConfigSchema","updateCheckUrl","moduleResourceUrl","internalConfig","appName","getFileConfig","configName","configFilePath","target","fileData","readFileSync","JSON","parse","src","mergeExistProperties","cmdConfig","lang","externalConfig","locale","language","getLocale","substr","mergedConfig","merge","inspectorShortcut","platform","globalShortcut","register","content","getFocusedWebContents","isDevToolsOpened","closeDevTools","reject","request","net","method","params","category","setHeader","write","stringify","contentType","response","buffer","chunk","currentVersion","end"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,QAAQ,a,mLCAzB,WACA,OACA,WACA,UAEQC,EAA+B,EAAAC,OAAM,QAA5BC,EAAsB,EAAAD,OAAM,UAAjBE,EAAW,EAAAF,OAAM,OAEvCG,EAAW,UAAKC,KAAK,EAAAC,IAAIC,QAAQ,WAAY,WAAY,QAEzDC,EAAS,EAAAC,aAAa,CACxBC,MAAO,UACPT,OAAQD,EACJE,EAAU,CAAED,OAAQ,wBACpBE,GAAO,SAAC,G,IAAEO,EAAK,QAAEC,EAAO,UAAyB,UAAlB,QAA2B,KAAKD,EAAK,KAA1B,YAAwC,MAAMC,MAE5FC,WAAY,CACR,IAAI,EAAAA,WAAWC,SAEnBC,aAAa,IAIbN,EAAOO,IAAI,IAAI,UAAgB,CAC3BL,MAAO,OACPM,SAAU,sBACVC,QAASb,EACTc,YAAa,aACbC,eAAe,EACfC,QAAS,MACTC,SAAU,MACVC,MAAM,EACNC,UAAW,SAACC,GACR,OAAGA,EAAQtB,YAAW,wBAAoCsB,EAAQb,QAAUa,EAAQb,QAAU,QAI7F,EAAAc,QAAUrB,EACvB,mBAAgBsB,GAAsB,OAAAlB,EAAOmB,MAAM,CAAEC,MAAOF,M,cCrC5D5D,EAAOD,QAAUkC,QAAQ,S,cCAzBjC,EAAOD,QAAUkC,QAAQ,O,kKCAzB,IA2Bc8B,EACAC,EA5Bd,OACA,UACA,WAMMC,EAAsB,EAAAzB,IAAI0B,aAAaC,QAAQ,aAAe,EAK9DC,EAAsBH,EACtB,UAAK1B,KAAK,EAAAC,IAAI0B,aAAc,OAC5B,UAAK3B,KAAK,EAAAC,IAAI0B,aAAc,MAG5BG,EAAU,UAAGC,OAAOC,SAAS,UAEnC,UAAe,CACXC,MAAO,UAAKjC,KAAK6B,EAAa,MAAO,SACrCK,OAAgBR,EACV,UAAK1B,KAAK6B,EAAa,KAAM,KAAM,UACnC,UAAK7B,KAAK6B,EAAa,KAAM,UAEnCM,QACUX,EAAaM,EAAU,MAAQ,MAC/BL,EAAWK,EAAU,aAAe,aACnCJ,EACD,UAAK1B,KAAK6B,EAAa,KAAM,KAAMJ,GACnC,UAAKzB,KAAK6B,EAAa,SAAUL,EAAYC,IAEvDW,UACSV,EAEMI,EACA,UAAK9B,KAAK6B,EAAa,KAAM,KAAM,iBAEnC,UAAK7B,KAAK6B,EAAa,KAAM,KAAM,sBAJ1C,I,cCnCZpE,EAAOD,QAAUkC,QAAQ,W,6hDCEzB,WACA,UACA,UACA,UACA,WACA,WAEA,WACA,WACA,WACA,WACA,WAGMS,EAFN,QAEe,QAAa,qBAExBkC,OAAwCC,EACxCC,EAAkB,KAClBC,EAAmB,KACnBC,EAAqB,GACrBC,EAAoB,GAEnB,EAAAzC,IAAI0C,6BAKLxC,EAAOyC,KAAK,qBACZ,EAAA3C,IAAI4C,GAAG,qBAAqB,WACxB,EAAA5C,IAAI6C,UAGR,EAAA7C,IAAI4C,GAAG,YAAY,SAACE,EAAOC,GACf,IAAAC,EAAmB,UAAYC,iBAAiBF,GAAI,eAC5DG,YAAW,qD,yDACCZ,EAAU,MACd,GAAM,IAAIa,SAAQ,SAACC,GAAY,OAAAF,WAAWE,EAAS,S,cAAnD,S,oBAEJd,EAAWe,eAAeL,G,aAC3B,QAIP,EAAAhD,IAAI4C,GAAG,mBAAmB,SAACE,EAAOQ,EAAMC,GACpC,IAAIC,EAAwD,CACxDC,OAAQ,GACRT,eAAgB,IAEdU,EAAsBJ,EAAKK,MAAK,SAACC,GAAQ,OAAAA,EAAIjC,QAAQ,aAAe,KAK1E,GAJI+B,IACAF,EAAY,UAAYP,iBAAiBS,IAGzCtB,IACAlC,EAAO2D,QAAQ,yCACXzB,EAAW0B,eACX1B,EAAW2B,UAEf3B,EAAW4B,QAEP5B,EAAW6B,aAAeT,GAAW,CAC7B,IAAAC,EAA2BD,EAAS,OAA5BR,EAAmBQ,EAAS,gBACX,IAA7Bf,EAAQd,QAAQ8B,KAChBvD,EAAOyC,KAAK,4BAA4Bc,EAAM,WAC9ChB,EAAQyB,KAAKT,IAEjBnB,EAAW6B,UAAUV,GAEjBT,GACAV,EAAWe,eAAeL,OAM1C,EAAAoB,QAAQxB,GAAG,UAAU,WACjB1C,EAAOyC,KAAK,oBACZJ,EAAY8B,QACZ,EAAArE,IAAIsE,WACJ,EAAAtE,IAAIuE,KAAK,MAGb,EAAAvE,IAAIwE,YAAYC,aAAa,4CAA6C,QAC1E,EAAAzE,IAAIwE,YAAYC,aAAa,kCAC7B,EAAAzE,IAAIwE,YAAYC,aAAa,wBAC7B,EAAAzE,IAAI0E,2BAA2B,WAC/B,EAAA1E,IAAI2E,KAAK,SAAS,WACd,EAAAC,KAAKC,mBAAmB,MACxB,IAAMvB,EAAOwB,QAAQxB,KAAKyB,MAAM,GAC1BC,EAAqB,UAAiB1B,GAE3B2B,EADK,UAAWD,GACe,QAChDvC,EAAUwC,GAAiB,GAE3B,IAAMC,EAAwB5B,EAAK3B,QAAQ,YAC3C,GAAIuD,GAAyB,EAAG,CACtB,MAA6B,UAAYjC,iBAC3CK,EAAK4B,IADDzB,EAAM,SAAET,EAAc,iBAG1BS,IACAvD,EAAOyC,KAAK,UAAUc,EAAM,aAC5BhB,EAAQyB,KAAKT,IAGbT,IACAR,EAAqBQ,GAI7B,UAAcmC,iBAAiB,CAAEC,MAAOJ,EAAmBI,QAC3DhD,EAAa,UAAcA,WAC3B,UAAciD,kBAAkBjD,GAEhC,YACAG,EAAc,IAAI,UAGlBD,EAAa,IAAI,UAAWF,EAAYG,EAAa,CACjDX,YAC6C,UAAK7B,KAAKuF,UAAW,KAAM,KAAM,QAG9E9C,GACAU,YAAW,WACPZ,EAAWe,eAAeb,KAC3B,QAIX,EAAA4B,QAAQxB,GAAG,sBAAsB,WAC7B,UAAc2C,0BAA2B,EACzCnD,WAAYiC,WAGhB,EAAAD,QAAQxB,GAAG,oBAAoB,WAC3B,UAAc4C,aAAe,UAAcA,YAAYC,UAG3D,EAAArB,QAAQxB,GAAG,kBAAkB,SAAC8C,EAAGC,GAC7B,EAAAC,OAAOC,mBAAmB,CACtB/D,KAAM,OACNzB,QAASsF,EACTG,OAAQH,OAIhB,EAAAvB,QAAQxB,GAAG,mBAAmB,WAC1B,UAAc4C,aAAe,UAAcA,YAAYO,UAG3D,EAAA3B,QAAQ4B,OAAO,eAAe,gF,uBAAY,SAAM,a,OAAN,6BAE1C,EAAA5B,QAAQ4B,OAAO,qBAAqB,qD,wDAEzB,OADDC,EAAiB,UAAK7C,QAAQkC,UAAW,KAAM,iBAC9C,GAAM,UAAGY,SAASC,SAASF,EAAgB,S,OAAlD,MAAO,CAAP,EAAO,sBAnIX/F,EAAO2D,QAAQ,0BACf,EAAA7D,IAAI6C,OACJiC,QAAQP,KAAK,IAqIjBO,QAAQlC,GAAG,qBAAqB,SAACwD,GAC7B,IAAMC,EAAqB,EAAAT,OAAOC,mBAAmB,CACjD/D,KAAM,QACNwE,MAAO,mBACPjG,QAAS,mBACTyF,OAAQM,EAAMG,WACdC,QAAS,CAAC,SAAU,UAExBtG,EAAOkG,MAAM,sCAAuCA,EAAM/F,QAAS+F,EAAMK,OAC9C,IAAvBJ,GACAvB,QAAQP,MAAM,O,kKC1KtB,cACA,UAEA,UACA,UAGMrE,EAAS,UAAa,mBAE5B,aAKI,WAAYwG,GACR,IAEI,IAAMC,EAAmB,UAAezE,OACxChC,EAAOyC,KAAK,8BAA8BgE,GAC1C,UAAGC,WAAWD,GACdE,KAAKC,aAAe,UAAMH,EAAkB,GAAI,CAC5CI,MAAO,CAAC,SAAU,UAAW,UAAW,OACxCC,UAAU,IAEd9G,EAAOyC,KAAK,oCACZkE,KAAKH,OAASA,EAChB,MAAOhB,GAEL,MADAxF,EAAOkG,MAAM,6CAA8CV,GACrD,IAAIuB,MACN,iFAkGhB,OA7FI,YAAAC,UAAA,SAAUR,GACNG,KAAKH,OAASA,GAGlB,YAAAS,KAAA,WACIN,KAAKO,iCACLP,KAAKQ,aAAa,SAItB,YAAAhD,MAAA,WACIwC,KAAKC,cAAgBD,KAAKC,aAAaQ,QAG3C,YAAAC,2BAAA,SAA2B9D,GAEvBoD,KAAKW,cAAgB/D,EACrBoD,KAAKQ,aAAa,YAAa5D,IAGnC,YAAAgE,mBAAA,WAEIZ,KAAKQ,aAAa,uBAGtB,YAAAK,KAAA,SAAKC,GAEDd,KAAKQ,aAAa,OAAQM,IAQ9B,YAAAN,aAAA,SAAaO,EAAoBvH,GAC7BwG,KAAKgB,kBAAoBhB,KAAKC,aAAaY,KAAK,CAC5C1I,IAAK4I,EACLlJ,MAAO2B,KAIf,YAAA+G,+BAAA,sBAaIP,KAAKC,cAAgBD,KAAKC,aAAalE,GAAG,WAAW,SAACvC,GAC1C,IAAArB,EAAeqB,EAAO,IAAjB3B,EAAU2B,EAAO,MAC9B,OAAQrB,GACR,IAAK,mBACD,EAAK0H,OAAOoB,uBAAuBpJ,GACnC,MAEJ,IAAK,qBACD,EAAKgI,OAAOqB,+BAA+BrJ,GAC3C,MAEJ,IAAK,OACD,EAAKgI,OAAOsB,iBAAiBtJ,GAC7B,MAEJ,IAAK,aACD,EAAKgI,OAAOuB,8BACZ,MAEJ,IAAK,QACI,EAAKT,eAAiB,EAAKA,gBAAkB9I,GAC9C,EAAKgI,OAAOwB,2BAEhB,MAEJ,QACIC,QAAQ/B,MAAM,+BAAgCpH,EAAKN,QAM/D,YAAAmJ,eAAA,WACI,OAAOhB,KAAKC,eACPD,KAAKC,aAAasB,QACnBvB,KAAKC,aAAauB,WAClBxB,KAAKC,aAAawB,SAE9B,EAtHA,GAwHA,UAAeC,G,cCjIf/K,EAAOD,QAAUkC,QAAQ,gB,cCAzBjC,EAAOD,QAAUkC,QAAQ,Y,cCAzBjC,EAAOD,QAAUkC,QAAQ,8B,cCAzBjC,EAAOD,QAAUkC,QAAQ,O,kKCAzB,WACA,UACA,UAGM+I,EAFN,QAE0B,QAAexG,MACnC9B,EAAS,UAAa,6BAC5B,UAAe,IAAI,WAAC,aAMT,KAAAqF,0BAA2B,EAC3B,KAAAC,iBAA8BnD,EAC9B,KAAAD,gBAA6BC,EAkExC,OAhEI,YAAAgD,kBAAA,SAAkBoD,GAAlB,WACIvI,EAAO2D,QAAQ,wBACfgD,KAAKrB,YAAc,IAAI,EAAAkD,cAAc,CACjCD,OAAM,EACNE,MAAO,IACPC,OAAQ,IACRC,WAAW,EACXC,SAAS,EACTC,QAAQ,EACRC,OAAO,EACPC,OAAO,EACPlD,MAAM,EACNmD,eAAgB,CACZC,iBAAiB,EACjBC,kBAAkB,EAClBC,QAAS,UAAKtJ,KAAKyI,EAAmB,KAAM,UAAW,wBAI/D3B,KAAKrB,YAAY8D,QAAQ,WAAW,UAAKlG,QAAQoF,EAAmB,eAEpE3B,KAAKrB,YAAY5C,GAAG,UAAU,WAC1B,EAAK4C,iBAAcnD,MAI3B,YAAA8C,iBAAA,SAAiB,GAAjB,WAAmBC,EAAK,QACd,EAAgCmE,OAAOC,aAArCC,EAAe,kBACjBnD,EAAqB,OADM,WACC,aAAe,mBAEjDO,KAAKzE,WAAa,IAAI,EAAAsG,cAAc,CAChCC,MAAO,IACPC,OAAQ,IACRc,SAAU,IACVpD,MAAOA,EAAQmD,EACfP,eAAgB,CACZS,sBAAsB,EACtBR,iBAAiB,EACjBC,kBAAkB,EAClBC,QAAS,UAAKtJ,KAAKyI,EAAmB,KAAM,UAAW,wBAI/D3B,KAAKzE,WAAWkH,QAAQ,WAAW,UAAKlG,QAAQoF,EAAmB,eAE/DpD,GACAyB,KAAKzE,WAAW6B,YAAY2F,eAGhC/C,KAAKzE,WAAWyH,QAAQ,MAExBhD,KAAKzE,WAAWQ,GAAG,SAAS,SAAC8C,G,MACpB,EAAKH,2BACNG,EAAEoE,iBACF5J,EAAO2D,QAAQ,oDACA,QAAf,IAAKzB,kBAAU,SAAE6B,YAAYyD,KAAK,4BAI1Cb,KAAKzE,WAAWQ,GAAG,UAAU,WACzB,EAAKR,gBAAaC,KAEtBnC,EAAO2D,QAAQ,gCAA+ByC,EAAQmD,KAE9D,EA1EmB,K,8ECPnB,+BA8CA,OA7CI,YAAAM,KAAA,SAAKC,EAAaC,GACd,IAAMC,EAASF,EAAIG,OACfC,EAASJ,EACb,GAAIE,EAASD,EACT,IAAK,IAAIxM,EAAI,EAAGA,EAAIwM,EAAMC,EAAQzM,IAC9B2M,EAAS,IAAIA,EAGrB,OAAOC,OAAOD,IAGlB,YAAAE,iBAAA,SAAiBC,GAAjB,WACI,IAAKA,EACD,MAAO,GAEX,IAAMC,EAAaH,OAAOE,GAEpBE,EAAmB,GAMzB,OALqBD,EAAWE,MAAM,KACzBC,SAAQ,SAACC,GAClBH,EAAOvG,KAAK,EAAK6F,KAAKa,EAAM,OAGzBH,EAAO1K,KAAK,MAGvB,YAAAkD,iBAAA,SAAiBK,GACb6E,QAAQ0C,IAAI,OAAQvH,GAEpB,IACIG,GADY,cAAcqH,KAAKxH,IAAS,CAAC,GAAI,KAC5B,GAEN,cAAXG,IACAA,EAAS,IAGb,IACIT,GADoB,yBAAyB8H,KAAKxH,IAAS,CAAC,GAAI,KAC/B,GAMrC,MAJuB,cAAnBN,IACAA,EAAiB,IAGd,CAAES,OAAQA,EAAOsH,QAAQ,MAAO,IAAK/H,eAAc,IAElE,EA9CA,GAgDA,UAAe,IAAIgI,G,kKChDnB,cACA,OAEM9K,EAAS,UAAa,oBAetB+K,EAA4B,CAC9BC,KAAM,CACF,CAAC,QAAS,MAEdC,KAAM,CACF,CAAC,SAAU,KACX,CAAC,OAAQ,OAIbf,EAA6B,GAEjC,SAASgB,EAAWpM,GAChB,IAAK,IAAIvB,EAAI,EAAGA,EAAIwN,EAAWC,KAAKf,OAAQ1M,IAAK,CACvC,MAAoBwN,EAAWC,KAAKzN,GAAnC4N,EAAQ,KAAEC,EAAK,KACtB,GAAI,KAAKD,IAAerM,GAAO,IAAIsM,IAAYtM,EAE3C,YADAoL,EAAOiB,IAAY,IAM/B,SAASE,EAAUvM,EAAaN,GAC5B,GAAKA,EAIL,IAAK,IAAIjB,EAAI,EAAGA,EAAIwN,EAAWE,KAAKhB,OAAQ1M,IAAK,CACvC,MAAoBwN,EAAWE,KAAK1N,GAAnC4N,EAAQ,KAAEC,EAAK,KACtB,GAAI,KAAKD,IAAerM,GAAO,IAAIsM,IAAYtM,EAE3C,YADAoL,EAAOiB,GAAY3M,IAM/B,mBAAgB4E,GACZ8G,EAAS,GACT,IAAK,IAAI3M,EAAI,EAAGA,EAAI6F,EAAK6G,OAAQ1M,IAAK,CAC5B,MAAe6F,EAAK7F,GAAGiN,MAAM,KAA5B1L,EAAG,KAAEN,EAAK,KACjB0M,EAAWpM,GACXuM,EAAUvM,EAAKN,GAKnB,OAFAwB,EAAOyC,KAAK,EAAA6I,OAAO,EAAAC,QAAQrB,IAAS,SAACA,EAAQ,GACzC,OAAGA,EAAM,KADoC,KAC5B,KADmC,OACrB,mCAC5BA,I,kKChEX,eACA,OACA,UACA,UACA,UACA,UACA,OAEMlK,EAAS,UAAa,oBAKtBwL,EAAmC,CACrCC,eAAgB,yCAChBC,kBAAmB,iCAKjBC,EAAoD,CACtDC,QAAS,WACTrC,gBAAiB,UAAYc,QAC7B9H,QAAS,IAcb,SAASsJ,EAAcC,QAAA,IAAAA,MAAA,SACnB,IACMC,EAAiB,UAAK7I,QAAQ,UAAenB,OAAQ,UAAU+J,EAAU,SAE/E9L,EAAOyC,KAAK,2BAA2BsJ,EAAc,OAErD,IALyBC,EAKnBC,EAAW,UAAGC,aAAaH,GACjC,OANyBC,EAMFG,KAAKC,MAAMH,GAjBtC,SAA8BD,EAAaK,GACvC,IAAMnC,EAAS8B,EAMf,OALA,EAAAvB,QAAQ4B,GAAK,SAAC7N,EAAOM,QACGqD,IAAhB+H,EAAOpL,KACPoL,EAAOpL,GAAON,MAGf0L,EAIkCoC,CAAqBd,EAAqBQ,GASvF,mBAAgBO,GACJ,MAA2BA,EAAS,OAApCxK,OAAM,IAAG,UAAO,EAAEyK,EAASD,EAAS,KACtCE,EAAiBZ,EAAc9J,GACjC2K,GAAUF,GAAQC,EAAeE,UAAY,EAAA7M,IAAI8M,aAAaC,OAAO,EAAG,GAE7D,OAAXH,IACAA,EAAS,MAGb,IAAMI,EAAe,EAAAC,MAAM,GACvBpB,EAAgB,CAAEgB,SAAUD,GAC5BD,GAQJ,OALAzM,EAAOyC,KAAK,yBACZzC,EAAO2D,QAAQ,EAAA2H,OAAO,EAAAC,QAAQuB,IAAe,SAAC5C,EAAQ,GAClD,OAAGA,EAAM,KAD6C,KACrC,KAD4C,OAC9B,kCACnCb,SAAWA,OAAOC,aAAewD,GAE1BA,I,ggGClEX,WAEA,qBACI,IAAIE,EAEAA,EADqB,WAArBpI,QAAQqI,SACY,gBAEA,kBAGxB,EAAAC,eAAeC,SAASH,GAAmB,WACvC,IAAMI,EAAU,EAAArJ,YAAYsJ,wBACxBD,IACAA,EAAQE,mBAAqBF,EAAQG,gBAAkBH,EAAQ1D,qB,sYCb3E,WAWM1J,EAVN,QAUe,QAAa,eAE5B,qBAAiD,WAAIiD,SAAQ,SAACC,EAASsK,GAC7D,MAAsCnE,OAAOC,aAA3CmC,EAAc,iBAAElC,EAAe,kBACjCkE,EAAU,EAAAC,IAAID,QAAQ,CACxBE,OAAQ,OACR9K,IAAK4I,IAEHmC,EAAS,CACXC,SAAU,WACVxD,QAASd,GAGbkE,EAAQK,UAAU,eAAgB,mCAClCL,EAAQM,MAAM5B,KAAK6B,UAAUJ,IAE7B5N,EAAOyC,KAAK,4BAA4B0J,KAAK6B,UAAU,EAAD,CAClDnL,IAAK4I,EACLkC,OAAQ,OACRM,YAAa,mCACVL,KAEPH,EAAQ/K,GAAG,YAAY,SAACwL,GACpB,IAAIC,EAAS,GACbD,EAASxL,GAAG,QAAS8K,GACrBU,EAASxL,GAAG,QAAQ,SAAC0L,GACjBD,GAAUC,EAAM/H,cAEpB6H,EAASxL,GAAG,OAAO,WACf,IAAI+E,EAAmC,GACvC,KACIA,EAAO0E,KAAKC,MAAM+B,IACbE,eAAiB9E,EACtBvJ,EAAOyC,KAAK,WAAW0J,KAAK6B,UAAUvG,IACxC,MAAOjC,I,QAGLtC,EAAQuE,UAIpBgG,EAAQ/K,GAAG,QAAS8K,GACpBC,EAAQa,W,cCrDZhR,EAAOD,QAAUkC,QAAQ","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = require(\"electron\");","import { createLogger, format, transports } from 'winston';\nimport { app } from 'electron';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport path from 'path';\n\nconst { combine, timestamp, printf } = format;\n\nconst _logPath = path.join(app.getPath('appData'), 'entry-hw', 'logs');\n\nconst logger = createLogger({\n    level: 'verbose',\n    format: combine(\n        timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n        printf(({ level, message, label, timestamp }) => `[${label}][${level}][${timestamp}]: ${message}`),\n    ),\n    transports: [\n        new transports.Console(),\n    ],\n    exitOnError: false,\n});\n\nif (process.env.NODE_ENV === 'production') {\n    logger.add(new DailyRotateFile({\n        level: 'info',\n        filename: 'entry-hw-%DATE%.log',\n        dirname: _logPath,\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: true,\n        maxSize: '10m',\n        maxFiles: '14d',\n        json: false, //Setting JSON as false\n        formatter: (options: any) =>\n            `${options.timestamp()}-${process.env.NODE_ENV}-message:${options.message ? options.message : ''}`,\n    }));\n}\n\nexport const logPath = _logPath;\nexport default (labelName: string) => logger.child({ label: labelName });\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","import {app} from 'electron';\nimport path from 'path';\nimport os from 'os';\n\n/**\n * electron 디렉토리 이하는 외부 서브모듈로 사용되지 않는다. 그러므로 getAppPath 를 사용할 수 있다.\n */\n\nconst isAsarPacked = (() => app.getAppPath().indexOf('app.asar') > -1)();\n\n// project's app directory path\n// development: /Users/user/entry_projects/entry-hw/app\n// production: /Users/user/entry_projects/entry-hw/dist/mac/Entry_HW.app/Contents/Resources/app.asar\nconst rootAppPath = (() => (isAsarPacked\n    ? path.join(app.getAppPath(), 'app')\n    : path.join(app.getAppPath(), '..')\n))();\n\nconst isMacOS = os.type().includes('Darwin');\n\nexport default {\n    views: path.join(rootAppPath, 'src', 'views'),\n    config: (() => (isAsarPacked\n        ? path.join(rootAppPath, '..', '..', 'config')\n        : path.join(rootAppPath, '..', 'config')\n    ))(),\n    server: (() => {\n        const subDirPath = isMacOS ? 'mac' : 'win';\n        const fileName = isMacOS ? 'server.txt' : 'server.exe';\n        return isAsarPacked\n            ? path.join(rootAppPath, '..', '..', fileName)\n            : path.join(rootAppPath, 'server', subDirPath, fileName);\n    })(),\n    validator: (() => {\n        if (!isAsarPacked) {\n            return undefined;\n        } else if (isMacOS) {\n            return path.join(rootAppPath, '..', '..', 'validator.txt');\n        } else {\n            return path.join(rootAppPath, '..', '..', 'validator.exe');\n        }\n    })(),\n};\n\n","module.exports = require(\"lodash\");","'use strict';\n\nimport { app, BrowserWindow, dialog, ipcMain, Menu } from 'electron';\nimport path from 'path';\nimport fs from 'fs';\nimport EntryServer from './serverProcessManager';\nimport WindowManager from './windowManager';\nimport CommonUtils from './commonUtils';\n// functions\nimport parseCommandLine from './functions/parseCommandLine';\nimport configInit from './functions/configInitialize';\nimport registerGlobalShortcut from './functions/registerGlobalShortcut';\nimport checkUpdate from './functions/checkUpdate';\nimport MainRouter from '../mainRouter.build';\nimport createLogger from './functions/createLogger';\n\nconst logger = createLogger('electron/index.ts');\n\nlet mainWindow: BrowserWindow | undefined = undefined;\nlet mainRouter: any = null;\nlet entryServer: any = null;\nlet autoOpenHardwareId = '';\nlet roomIds: string[] = [];\n\nif (!app.requestSingleInstanceLock()) {\n    logger.verbose('App is already running');\n    app.quit();\n    process.exit(0);\n} else {\n    logger.info('Entry HW started.');\n    app.on('window-all-closed', () => {\n        app.quit();\n    });\n\n    app.on('open-url', (event, url) => {\n        const { openHardwareId } = CommonUtils.getArgsParseData(url);\n        setTimeout(async () => {\n            while (!mainRouter) {\n                await new Promise((resolve) => setTimeout(resolve, 500));\n            }\n            mainRouter.selectHardware(openHardwareId);\n        }, 1000);\n    });\n\n    // 어플리케이션을 중복 실행했습니다. 주 어플리케이션 인스턴스를 활성화 합니다.\n    app.on('second-instance', (event, argv, workingDirectory) => {\n        let parseData: { roomId: string; openHardwareId: string } = {\n            roomId: '',\n            openHardwareId: '',\n        };\n        const entryHwCustomSchema = argv.find((arg) => arg.indexOf('entryhw:') > -1);\n        if (entryHwCustomSchema) {\n            parseData = CommonUtils.getArgsParseData(entryHwCustomSchema);\n        }\n\n        if (mainWindow) {\n            logger.verbose('[second-instance] mainWindow restored');\n            if (mainWindow.isMinimized()) {\n                mainWindow.restore();\n            }\n            mainWindow.focus();\n\n            if (mainWindow.webContents && parseData) {\n                const { roomId, openHardwareId } = parseData;\n                if (roomIds.indexOf(roomId) === -1) {\n                    logger.info(`[second-instance] roomId ${roomId} pushed`);\n                    roomIds.push(roomId);\n                }\n                mainRouter.addRoomId(roomId);\n\n                if (openHardwareId) {\n                    mainRouter.selectHardware(openHardwareId);\n                }\n            }\n        }\n    });\n\n    ipcMain.on('reload', () => {\n        logger.info('Entry HW reload.');\n        entryServer.close();\n        app.relaunch();\n        app.exit(0);\n    });\n\n    app.commandLine.appendSwitch('enable-experimental-web-platform-features', 'true');\n    app.commandLine.appendSwitch('disable-renderer-backgrounding');\n    app.commandLine.appendSwitch('enable-web-bluetooth');\n    app.setAsDefaultProtocolClient('entryhw');\n    app.once('ready', () => {\n        Menu.setApplicationMenu(null);\n        const argv = process.argv.slice(1);\n        const commandLineOptions = parseCommandLine(argv);\n        const configuration = configInit(commandLineOptions);\n        const { roomIds: configRoomIds } = configuration;\n        roomIds = configRoomIds || [];\n\n        const customSchemaArgvIndex = argv.indexOf('entryhw:');\n        if (customSchemaArgvIndex > -1) {\n            const { roomId, openHardwareId } = CommonUtils.getArgsParseData(\n                argv[customSchemaArgvIndex]\n            );\n            if (roomId) {\n                logger.info(`roomId ${roomId} detected`);\n                roomIds.push(roomId);\n            }\n\n            if (openHardwareId) {\n                autoOpenHardwareId = openHardwareId;\n            }\n        }\n\n        WindowManager.createMainWindow({ debug: commandLineOptions.debug });\n        mainWindow = WindowManager.mainWindow;\n        WindowManager.createAboutWindow(mainWindow);\n\n        registerGlobalShortcut();\n        entryServer = new EntryServer();\n\n        // @ts-ignore\n        mainRouter = new MainRouter(mainWindow, entryServer, {\n            rootAppPath:\n                process.env.NODE_ENV === 'production' && path.join(__dirname, '..', '..', '..'),\n        });\n\n        if (autoOpenHardwareId) {\n            setTimeout(() => {\n                mainRouter.selectHardware(autoOpenHardwareId);\n            }, 1000);\n        }\n    });\n\n    ipcMain.on('hardwareForceClose', () => {\n        WindowManager.mainWindowCloseConfirmed = true;\n        mainWindow?.close();\n    });\n\n    ipcMain.on('closeAboutWindow', () => {\n        WindowManager.aboutWindow && WindowManager.aboutWindow.hide();\n    });\n\n    ipcMain.on('showMessageBox', (e, msg) => {\n        dialog.showMessageBoxSync({\n            type: 'none',\n            message: msg,\n            detail: msg,\n        });\n    });\n\n    ipcMain.on('openAboutWindow', () => {\n        WindowManager.aboutWindow && WindowManager.aboutWindow.show();\n    });\n\n    ipcMain.handle('checkUpdate', async () => await checkUpdate());\n\n    ipcMain.handle('getOpenSourceText', async () => {\n        const openSourceFile = path.resolve(__dirname, '..', 'OPENSOURCE.md');\n        return await fs.promises.readFile(openSourceFile, 'utf8');\n    });\n}\n\nprocess.on('uncaughtException', (error) => {\n    const whichButtonClicked = dialog.showMessageBoxSync({\n        type: 'error',\n        title: 'Unexpected Error',\n        message: 'Unexpected Error',\n        detail: error.toString(),\n        buttons: ['ignore', 'exit'],\n    });\n    logger.error('Entry HW uncaughtException occurred', error.message, error.stack);\n    if (whichButtonClicked === 1) {\n        process.exit(-1);\n    }\n});\n","import spawn from 'cross-spawn';\nimport fs from 'fs';\nimport { ChildProcess } from 'child_process';\nimport createLogger from './functions/createLogger';\nimport directoryPaths from './electronDirectoryPaths';\nimport type MainRouter from '../mainRouter';\n\nconst logger = createLogger('electron/server');\n\nclass ServerProcessManager {\n    private readonly childProcess: ChildProcess;\n    private currentRoomId: string | undefined;\n    private router: MainRouter;\n\n    constructor(router?: any) {\n        try {\n            // this.childProcess = new Server();\n            const serverBinaryPath = directoryPaths.server;\n            logger.info(`EntryServer try to spawn.. ${serverBinaryPath}`);\n            fs.accessSync(serverBinaryPath);\n            this.childProcess = spawn(serverBinaryPath, [], {\n                stdio: ['ignore', 'inherit', 'inherit', 'ipc'],\n                detached: true,\n            });\n            logger.info('EntryServer spawned successfully');\n            this.router = router;\n        } catch (e) {\n            logger.error('Error occurred while spawn Server Process.', e);\n            throw new Error(\n                'Error occurred while spawn Server Process. make sure it exists same dir path',\n            );\n        }\n    }\n\n    setRouter(router: any) {\n        this.router = router;\n    }\n\n    open() {\n        this._receiveFromChildEventRegister();\n        this._sendToChild('open');\n        // this.childProcess.open();\n    }\n\n    close() {\n        this.childProcess && this.childProcess.kill();\n    }\n\n    addRoomIdsOnSecondInstance(roomId: string) {\n        // this.childProcess.addRoomId(roomId);\n        this.currentRoomId = roomId;\n        this._sendToChild('addRoomId', roomId);\n    }\n\n    disconnectHardware() {\n        // this.childProcess.disconnectHardware();\n        this._sendToChild('disconnectHardware');\n    }\n\n    send(data: any) {\n        // this.childProcess.sendToClient(data);\n        this._sendToChild('send', data);\n    }\n\n    /**\n     * @param methodName{string}\n     * @param message{Object?}\n     * @private\n     */\n    _sendToChild(methodName: string, message?: any) {\n        this._isProcessLive() && this.childProcess.send({\n            key: methodName,\n            value: message,\n        });\n    }\n\n    _receiveFromChildEventRegister() {\n        // this.childProcess.on('cloudModeChanged', (mode) => {\n        //     this.router.notifyCloudModeChanged(mode);\n        // });\n        // this.childProcess.on('runningModeChanged', (mode) => {\n        //     this.router.notifyServerRunningModeChanged(mode);\n        // });\n        // this.childProcess.on('message', (message) => {\n        //     this.router.handleServerData(message);\n        // });\n        // this.childProcess.on('close', () => {\n\n        // });\n        this.childProcess && this.childProcess.on('message', (message: { key: string; value: any; }) => {\n            const { key, value } = message;\n            switch (key) {\n            case 'cloudModeChanged': {\n                this.router.notifyCloudModeChanged(value);\n                break;\n            }\n            case 'runningModeChanged': {\n                this.router.notifyServerRunningModeChanged(value);\n                break;\n            }\n            case 'data': {\n                this.router.handleServerData(value);\n                break;\n            }\n            case 'connection': {\n                this.router.handleServerSocketConnected();\n                break;\n            }\n            case 'close': {\n                if (!this.currentRoomId || this.currentRoomId === value) {\n                    this.router.handleServerSocketClosed();\n                }\n                break;\n            }\n            default: {\n                console.error('unhandled pkg server message', key, value);\n            }\n            }\n        });\n    }\n\n    _isProcessLive() {\n        return this.childProcess &&\n            !this.childProcess.killed &&\n            this.childProcess.connected &&\n            this.childProcess.channel;\n    }\n}\n\nexport default ServerProcessManager;\n","module.exports = require(\"cross-spawn\");","module.exports = require(\"winston\");","module.exports = require(\"winston-daily-rotate-file\");","module.exports = require(\"os\");","import { app, BrowserWindow } from 'electron';\nimport path from 'path';\nimport createLogger from './functions/createLogger';\nimport directoryPaths from './electronDirectoryPaths';\n\nconst viewDirectoryPath = directoryPaths.views;\nconst logger = createLogger('electron/windowManager.ts');\nexport default new (class {\n    /*\n    하드웨어 메인 윈도우는 하드웨어 연결중인 경우는 꺼지지 않도록 기획되었다.\n    그러므로 close native event 가 발생했을 때, 렌더러에 다시 물어본 후\n    해당 값을 세팅 한 뒤 다시 close 를 호출 하는 식으로 종료한다.\n     */\n    public mainWindowCloseConfirmed = false;\n    public aboutWindow?: BrowserWindow = undefined;\n    public mainWindow?: BrowserWindow = undefined;\n\n    createAboutWindow(parent?: BrowserWindow) {\n        logger.verbose('about window created');\n        this.aboutWindow = new BrowserWindow({\n            parent,\n            width: 380,\n            height: 290,\n            resizable: false,\n            movable: false,\n            center: true,\n            frame: false,\n            modal: true,\n            show: false,\n            webPreferences: {\n                nodeIntegration: true,\n                contextIsolation: false,\n                preload: path.join(viewDirectoryPath, '..', 'preload', 'preload.bundle.js'),\n            },\n        });\n\n        this.aboutWindow.loadURL(`file:///${path.resolve(viewDirectoryPath, 'about.html')}`);\n\n        this.aboutWindow.on('closed', () => {\n            this.aboutWindow = undefined;\n        });\n    }\n\n    createMainWindow({ debug }: { debug?: boolean }) {\n        const { hardwareVersion, language } = global.sharedObject;\n        const title = language === 'ko' ? '엔트리 하드웨어 v' : 'Entry Hardware v';\n\n        this.mainWindow = new BrowserWindow({\n            width: 800,\n            height: 670,\n            minWidth: 420,\n            title: title + hardwareVersion,\n            webPreferences: {\n                backgroundThrottling: false,\n                nodeIntegration: false,\n                contextIsolation: false,\n                preload: path.join(viewDirectoryPath, '..', 'preload', 'preload.bundle.js'),\n            },\n        });\n\n        this.mainWindow.loadURL(`file:///${path.resolve(viewDirectoryPath, 'index.html')}`);\n\n        if (debug) {\n            this.mainWindow.webContents.openDevTools();\n        }\n\n        this.mainWindow.setMenu(null);\n\n        this.mainWindow.on('close', (e) => {\n            if (!this.mainWindowCloseConfirmed) {\n                e.preventDefault();\n                logger.verbose('EntryHW close rejected. confirm connection close');\n                this.mainWindow?.webContents.send('hardwareCloseConfirm');\n            }\n        });\n\n        this.mainWindow.on('closed', () => {\n            this.mainWindow = undefined;\n        });\n        logger.verbose(`main window created. title: ${title + hardwareVersion}`);\n    }\n})();\n","class CommonUtils {\n    lpad(str: string, len: number) {\n        const strLen = str.length;\n        let result = str;\n        if (strLen < len) {\n            for (let i = 0; i < len - strLen; i++) {\n                result = `0${result}`;\n            }\n        }\n        return String(result);\n    };\n\n    getPaddedVersion(version: string) {\n        if (!version) {\n            return '';\n        }\n        const versionStr = String(version);\n\n        const padded: string[] = [];\n        const splitVersion = versionStr.split('.');\n        splitVersion.forEach((item) => {\n            padded.push(this.lpad(item, 4));\n        });\n\n        return padded.join('.');\n    }\n\n    getArgsParseData(argv: string) {\n        console.log('argv', argv);\n\n        const arrRoom = /roomId:(.*)/.exec(argv) || ['', ''];\n        let roomId = arrRoom[1];\n\n        if (roomId === 'undefined') {\n            roomId = '';\n        }\n\n        const regexHardwareId = /openHardwareId:([^&]*)/.exec(argv) || ['', ''];\n        let openHardwareId = regexHardwareId[1];\n\n        if (openHardwareId === 'undefined') {\n            openHardwareId = '';\n        }\n\n        return { roomId: roomId.replace(/\\//g, ''), openHardwareId };\n    }\n}\n\nexport default new CommonUtils();\n","import createLogger from './createLogger';\nimport { reduce, toPairs } from 'lodash';\n\nconst logger = createLogger('ParseCommandLine');\n\n/**\n * 커맨드라인 값으로 허용할 형태\n * flag 의 경우는 이후 붙을 값 없이 해당 키가 존재하면 적용된다.\n * pair 의 경우는 키가 나오면, 그다음은 값이 있어야 한다.\n * 그렇지 않을 경우 다음 pair 체크로 넘어간다.\n *\n * pair 값의 첫 인덱스는 실제 값, 그다음부터는 alias 이다.\n * 실제 값의 경우는 -- 가 붙어야 하며, alias 는 - 만 붙는다.\n *\n * 모든 값은 대소문자를 구분한다.\n * 모든 값은 '=' 으로 구분한다.\n */\ntype IPropertyType = { flag: [keyof ICommandLineFlags, string][], pair: [keyof ICommandLineArgs, string][] };\nconst properties: IPropertyType = {\n    flag: [\n        ['debug', 'd'],\n    ],\n    pair: [\n        ['config', 'c'],\n        ['lang', 'l'],\n    ],\n};\n\nlet result: ICommandLineConfig = {};\n\nfunction parseFlags(key: string) {\n    for (let i = 0; i < properties.flag.length; i++) {\n        const [fullName, alias] = properties.flag[i];\n        if (`--${fullName}` === key || `-${alias}` === key) {\n            result[fullName] = true;\n            return;\n        }\n    }\n}\n\nfunction parsePair(key: string, value: string) {\n    if (!value) {\n        return;\n    }\n\n    for (let i = 0; i < properties.pair.length; i++) {\n        const [fullName, alias] = properties.pair[i];\n        if (`--${fullName}` === key || `-${alias}` === key) {\n            result[fullName] = value;\n            return;\n        }\n    }\n}\n\nexport default (argv: string[]): ICommandLineConfig => {\n    result = {};\n    for (let i = 0; i < argv.length; i++) {\n        const [key, value] = argv[i].split('=');\n        parseFlags(key);\n        parsePair(key, value);\n    }\n\n    logger.info(reduce(toPairs(result), (result, [key, value]) =>\n        `${result}\\n${key}: ${value}`, 'parsed commandLine config is..'));\n    return result;\n};\n","import packageJson from '../../../../../package.json';\nimport { forEach, merge, reduce, toPairs } from 'lodash';\nimport path from 'path';\nimport fs from 'fs';\nimport createLogger from './createLogger';\nimport directoryPaths from '../electronDirectoryPaths';\nimport { app } from 'electron';\n\nconst logger = createLogger('ConfigInitialize');\n/**\n * 외부 config 파일이 존재하지 않는 경우의 기본값.\n * 아래 로직상 여기에 없는 키는 적용되지 않는다.\n */\nconst defaultConfigSchema: IFileConfig = {\n    updateCheckUrl: 'https://playentry.org/api/checkVersion',\n    moduleResourceUrl: 'https://playentry.org/modules',\n};\n/**\n * 외부 설정이 아닌 내부에서 정의되며, 변경될 여지가 없는 하드코드의 경우 이쪽에 선언한다.\n */\nconst internalConfig: Omit<IInternalConfig, 'language'> = {\n    appName: 'hardware',\n    hardwareVersion: packageJson.version,\n    roomIds: [],\n};\n\n// target 에 있는 키만 병합한다.\nfunction mergeExistProperties(target: any, src: any) {\n    const result = target;\n    forEach(src, (value, key) => {\n        if (result[key] !== undefined) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\n\nfunction getFileConfig(configName = 'entry') {\n    const getMergedConfig = (target: any) => mergeExistProperties(defaultConfigSchema, target);\n    const configFilePath = path.resolve(directoryPaths.config, `config.${configName}.json`);\n\n    logger.info(`load configuration file ${configFilePath}...`);\n\n    const fileData = fs.readFileSync(configFilePath);\n    return getMergedConfig(JSON.parse(fileData as any)) as IFileConfig;\n}\n\nexport default (cmdConfig: ICommandLineConfig) => {\n    const { config = 'entry', lang } = cmdConfig;\n    const externalConfig = getFileConfig(config);\n    let locale = (lang || externalConfig.language || app.getLocale()).substr(0, 2);\n\n    if (locale === 'ja') {\n        locale = 'jp';\n    }\n\n    const mergedConfig = merge({},\n        internalConfig, { language: locale },\n        externalConfig,\n    ) as IFileConfig & IInternalConfig;\n\n    logger.info('configuration applied');\n    logger.verbose(reduce(toPairs(mergedConfig), (result, [key, value]) =>\n        `${result}\\n${key}: ${value}`, 'configuration properties is..'));\n    global && (global.sharedObject = mergedConfig);\n\n    return mergedConfig;\n};\n","import { globalShortcut, webContents } from 'electron';\n\nexport default () => {\n    let inspectorShortcut;\n    if (process.platform === 'darwin') {\n        inspectorShortcut = 'Command+Alt+i';\n    } else {\n        inspectorShortcut = 'Control+Shift+i';\n    }\n\n    globalShortcut.register(inspectorShortcut, () => {\n        const content = webContents.getFocusedWebContents();\n        if (content) {\n            content.isDevToolsOpened() ? content.closeDevTools() : content.openDevTools();\n        }\n    });\n};\n","import { net } from 'electron';\nimport createLogger from './createLogger';\n\ntype CheckUpdateResult = {\n    version: string;\n    padded_version: string;\n    hasNewVersion: boolean;\n    currentVersion: string;\n    _id: string;\n}\n\nconst logger = createLogger('CheckUpdate');\n\nexport default (): Promise<CheckUpdateResult> => new Promise((resolve, reject) => {\n    const { updateCheckUrl, hardwareVersion } = global.sharedObject;\n    const request = net.request({\n        method: 'POST',\n        url: updateCheckUrl,\n    });\n    const params = {\n        category: 'hardware',\n        version: hardwareVersion,\n    };\n\n    request.setHeader('content-type', 'application/json; charset=utf-8');\n    request.write(JSON.stringify(params));\n\n    logger.info(`entry hw version check.. ${JSON.stringify({\n        url: updateCheckUrl,\n        method: 'POST',\n        contentType: 'application/json; charset=utf-8',\n        ...params,\n    })}`);\n    request.on('response', (response) => {\n        let buffer = '';\n        response.on('error', reject);\n        response.on('data', (chunk) => {\n            buffer += chunk.toString();\n        });\n        response.on('end', () => {\n            let data: Partial<CheckUpdateResult> = {};\n            try {\n                data = JSON.parse(buffer);\n                data.currentVersion = hardwareVersion;\n                logger.info(`result: ${JSON.stringify(data)}`);\n            } catch (e) {\n                // nothing to do\n            } finally {\n                resolve(data as CheckUpdateResult);\n            }\n        });\n    });\n    request.on('error', reject);\n    request.end();\n});\n","module.exports = require(\"./main/mainRouter.build\");"],"sourceRoot":""}